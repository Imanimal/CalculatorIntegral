package mainPackages;

import java.awt.Component;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.LinkedList;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

public class MainForm extends javax.swing.JFrame {

    Component frame;// Аналог MessageBox
    LinkedList<RecIntegral> collectionParam;// Хранит текущую коллекцию параметров, отображается на таблице
    
    // Поля для потоков
    private boolean modeInterBut, isAbort;
    private double amountStep;
    int countThread;
    LinkedList<CalculatorThread> listThreads;
    double resultCalc;
    
    // Класс, выполняющий вычисления в отдельном потоке
    class CalculatorThread extends Thread
    {
        public double downEdge, upEdge, step, result;
        
        private synchronized void setResult(double value)
        {
            resultCalc += result;
        }
        
        private synchronized void decCountThread()
        {
            countThread--;
        }
        
        @Override
        public void run()
        {
            result = 0;
            for (double currentValue = downEdge;
                        currentValue < (upEdge - 0.000000009);
                        currentValue += step) {
                // если нажали "Прервать"
                if (isAbort)
                    return;
                result += (Math.sin(currentValue) + Math.sin(currentValue + step)) * step / 2;
                calculateProgressBar.setValue(calculateProgressBar.getValue() + 1);
            }
            setResult(result);
            decCountThread();
            // если этот поток закончил последним
            if (countThread == 0)
            {
                outputResultTextField.setText(String.valueOf(resultCalc));
                
                statusLabel.setText("Готово!");
                calculateProgressBar.setValue(calculateProgressBar.getMaximum());
                
                modeInterBut = false;
                calcButton.setText("Вычислить");
            }
        }
    }
    
    public MainForm() throws InputException {
        initComponents();
        this.setIconImage(new ImageIcon("images/icon.png").getImage());
        
        frame = null;
        modeInterBut = false;
        collectionParam = new LinkedList<RecIntegral>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        fileChooser = new javax.swing.JFileChooser();
        constLabelDownEdge = new javax.swing.JLabel();
        inputDownEdgeTextField = new javax.swing.JTextField();
        constLabelUpEdge = new javax.swing.JLabel();
        inputUpEdgeTextField = new javax.swing.JTextField();
        constLabelStep = new javax.swing.JLabel();
        inputStepTextField = new javax.swing.JTextField();
        addRowButton = new javax.swing.JButton();
        deleteRowButton = new javax.swing.JButton();
        calcButton = new javax.swing.JButton();
        constLabelOutputResult = new javax.swing.JLabel();
        outputResultTextField = new javax.swing.JTextField();
        scrollTableData = new javax.swing.JScrollPane();
        tableData = new javax.swing.JTable();
        resetTableButton = new javax.swing.JButton();
        exampTableButton = new javax.swing.JButton();
        calculateProgressBar = new javax.swing.JProgressBar();
        statusLabel = new javax.swing.JLabel();
        mainMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        fileOpenMenu = new javax.swing.JMenu();
        fileOpenTextMenuItem = new javax.swing.JMenuItem();
        fileOpenBinaryMenuItem = new javax.swing.JMenuItem();
        fileSaveMenu = new javax.swing.JMenu();
        fileSaveTextMenuItem = new javax.swing.JMenuItem();
        fileSaveBinaryMenuItem = new javax.swing.JMenuItem();

        fileChooser.setCurrentDirectory(new java.io.File("C:\\"));

            setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
            setTitle("Calculate Integral Sin(x)");
            setBounds(new java.awt.Rectangle(0, 0, 0, 0));
            setLocation(new java.awt.Point(200, 200));
            setName("MainForm"); // NOI18N
            setResizable(false);
            java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
            layout.columnWidths = new int[] {0, 5, 0, 5, 0, 5, 0};
            layout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
            getContentPane().setLayout(layout);

            constLabelDownEdge.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
            constLabelDownEdge.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
            constLabelDownEdge.setText("Нижняя граница:");
            constLabelDownEdge.setToolTipText("");
            constLabelDownEdge.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    constLabelDownEdgeMouseClicked(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
            gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
            getContentPane().add(constLabelDownEdge, gridBagConstraints);

            inputDownEdgeTextField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
            inputDownEdgeTextField.setNextFocusableComponent(inputUpEdgeTextField);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.gridwidth = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 6);
            getContentPane().add(inputDownEdgeTextField, gridBagConstraints);

            constLabelUpEdge.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
            constLabelUpEdge.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
            constLabelUpEdge.setText("Верхняя граница:");
            constLabelUpEdge.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    constLabelUpEdgeMouseClicked(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
            gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 0);
            getContentPane().add(constLabelUpEdge, gridBagConstraints);

            inputUpEdgeTextField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
            inputUpEdgeTextField.setNextFocusableComponent(inputStepTextField);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.gridwidth = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 6);
            getContentPane().add(inputUpEdgeTextField, gridBagConstraints);

            constLabelStep.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
            constLabelStep.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
            constLabelStep.setText("Шаг:");
            constLabelStep.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    constLabelStepMouseClicked(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
            gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 0);
            getContentPane().add(constLabelStep, gridBagConstraints);

            inputStepTextField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
            inputStepTextField.setToolTipText("");
            inputStepTextField.setNextFocusableComponent(addRowButton);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.gridwidth = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 6);
            getContentPane().add(inputStepTextField, gridBagConstraints);

            addRowButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
            addRowButton.setText("Добавить");
            addRowButton.setNextFocusableComponent(tableData);
            addRowButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    addRowButtonActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 8;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 6);
            getContentPane().add(addRowButton, gridBagConstraints);

            deleteRowButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
            deleteRowButton.setText("Удалить");
            deleteRowButton.setName(""); // NOI18N
            deleteRowButton.setNextFocusableComponent(inputDownEdgeTextField);
            deleteRowButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    deleteRowButtonActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 10;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 6, 6);
            getContentPane().add(deleteRowButton, gridBagConstraints);

            calcButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
            calcButton.setText("Вычислить");
            calcButton.setNextFocusableComponent(deleteRowButton);
            calcButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    calcButtonActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 6);
            getContentPane().add(calcButton, gridBagConstraints);

            constLabelOutputResult.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
            constLabelOutputResult.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
            constLabelOutputResult.setText("Результат:");
            constLabelOutputResult.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    constLabelOutputResultMouseClicked(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
            gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 0);
            getContentPane().add(constLabelOutputResult, gridBagConstraints);

            outputResultTextField.setEditable(false);
            outputResultTextField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            getContentPane().add(outputResultTextField, gridBagConstraints);

            scrollTableData.setPreferredSize(new java.awt.Dimension(454, 175));

            tableData.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
            tableData.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {
                    "Нижняя граница", "Верхняя граница", "Шаг"
                }
            ) {
                boolean[] canEdit = new boolean [] {
                    false, false, false
                };

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
            });
            tableData.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
            tableData.setNextFocusableComponent(calcButton);
            scrollTableData.setViewportView(tableData);
            if (tableData.getColumnModel().getColumnCount() > 0) {
                tableData.getColumnModel().getColumn(0).setResizable(false);
                tableData.getColumnModel().getColumn(1).setResizable(false);
                tableData.getColumnModel().getColumn(2).setResizable(false);
            }

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 8;
            gridBagConstraints.gridwidth = 3;
            gridBagConstraints.gridheight = 7;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.ipady = 3;
            gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 0);
            getContentPane().add(scrollTableData, gridBagConstraints);

            resetTableButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
            resetTableButton.setText("Очистить");
            resetTableButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    resetTableButtonActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 14;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 6);
            getContentPane().add(resetTableButton, gridBagConstraints);

            exampTableButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
            exampTableButton.setText("Заполнить");
            exampTableButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    exampTableButtonActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 12;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 6);
            getContentPane().add(exampTableButton, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 16;
            gridBagConstraints.gridwidth = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.insets = new java.awt.Insets(0, 6, 6, 0);
            getContentPane().add(calculateProgressBar, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 16;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 6, 6);
            getContentPane().add(statusLabel, gridBagConstraints);

            fileMenu.setText("Файл");

            fileOpenMenu.setText("Открыть");

            fileOpenTextMenuItem.setText("Текстовый режим");
            fileOpenTextMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    fileOpenTextMenuItemActionPerformed(evt);
                }
            });
            fileOpenMenu.add(fileOpenTextMenuItem);

            fileOpenBinaryMenuItem.setText("Двоичный режим");
            fileOpenBinaryMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    fileOpenBinaryMenuItemActionPerformed(evt);
                }
            });
            fileOpenMenu.add(fileOpenBinaryMenuItem);

            fileMenu.add(fileOpenMenu);

            fileSaveMenu.setText("Сохранить");

            fileSaveTextMenuItem.setText("Текстовый режим");
            fileSaveTextMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    fileSaveTextMenuItemActionPerformed(evt);
                }
            });
            fileSaveMenu.add(fileSaveTextMenuItem);

            fileSaveBinaryMenuItem.setText("Двоичный режим");
            fileSaveBinaryMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    fileSaveBinaryMenuItemActionPerformed(evt);
                }
            });
            fileSaveMenu.add(fileSaveBinaryMenuItem);

            fileMenu.add(fileSaveMenu);

            mainMenuBar.add(fileMenu);

            setJMenuBar(mainMenuBar);

            pack();
        }// </editor-fold>//GEN-END:initComponents

    // Метод, обновляющий записи в таблице из коллекции collectionParam
    private void updateTable()
    {
        ((DefaultTableModel) tableData.getModel()).setRowCount(0);
        for (RecIntegral param : collectionParam)
            ((DefaultTableModel) tableData.getModel()).addRow(new Object[]{
                param.getDownEdge(), param.getUpEdge(), param.getStep()});
    }
    
    // Метод, добавляющий очередной параметр в коллекцию collectionParam
    private void addIntegralParam(RecIntegral param)
    {
        collectionParam.add(param);
        ((DefaultTableModel) tableData.getModel()).addRow(new Object[]{
            param.getDownEdge(), param.getUpEdge(), param.getStep()});
    }
    
    // Метод, удаляющий очередной параметр из коллекции collectionParam
    private void removeIntegralParam(int index)
    {
        collectionParam.remove(index);
        ((DefaultTableModel) tableData.getModel()).removeRow(index);
    }
    
    // Метод, очищающий коллекцию collectionParam
    private void resetIntegralParams()
    {
        collectionParam.clear();
        ((DefaultTableModel) tableData.getModel()).setRowCount(0);
    }
    
    // Метод, проверяющий введёное число на корректность (могли ввести буквы)
    private boolean isOnlyDigits(String str) {
        return str.matches("^[-+]?[0-9]+(|[.][0-9]+)$");
    }
    
    // Обработчик кнопки "Добавить"
    private void addRowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRowButtonActionPerformed
        try {
            // если все поля заполнены
            if (!inputDownEdgeTextField.getText().isEmpty()
                    & !inputUpEdgeTextField.getText().isEmpty()
                    & !inputStepTextField.getText().isEmpty()) {
                // если введен верный формат числа
                if (isOnlyDigits(inputDownEdgeTextField.getText())
                        & isOnlyDigits(inputUpEdgeTextField.getText())
                        & isOnlyDigits(inputStepTextField.getText())) {
                    RecIntegral rowTable = new RecIntegral(Double.parseDouble(inputDownEdgeTextField.getText()),
                            Double.parseDouble(inputUpEdgeTextField.getText()),
                            Double.parseDouble(inputStepTextField.getText()));
                    collectionParam.add(rowTable);
                    updateTable();
                } else {
                    JOptionPane.showMessageDialog(frame, "Введите корректные числа.\nПример числа: 0.001", "Ошибка ввода", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(frame, "Заполните все поля параметров интеграла:\nНижняя граница, верхняя граница и шаг.", "Ошибка ввода", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (InputException e) {
            e.showMessageError();
        }
    }//GEN-LAST:event_addRowButtonActionPerformed

    // Обработчик кнопки "Удалить"
    private void deleteRowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRowButtonActionPerformed
        int selectedRow = tableData.getSelectedRow();
        if (selectedRow != -1)
        {
            removeIntegralParam(selectedRow);
        } 
        else
        {
            JOptionPane.showMessageDialog(frame, "Выделите строку параметров интеграла в таблице.", deleteRowButton.getText(), JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_deleteRowButtonActionPerformed
    
    // Обработчик кнопки "Вычислить/Прервать"
    private void calcButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcButtonActionPerformed
        // если в текущий момент производится вычисление
        if (modeInterBut)
        {
            isAbort = true;
            statusLabel.setText("Прервано!");
            calculateProgressBar.setValue(0);
            
            modeInterBut = false;
            calcButton.setText("Вычислить");
        }
        else
        {
           int selectedRow = tableData.getSelectedRow();
           // если строка выделена
           if (selectedRow != -1) {
               RecIntegral selectRec = collectionParam.get(selectedRow);

               resultCalc = 0;
               amountStep = (selectRec.getUpEdge() - selectRec.getDownEdge()) / selectRec.getStep();
               countThread = 2;
               listThreads = new LinkedList<CalculatorThread>();
               
               resultCalc = 0;
               amountStep = (selectRec.getUpEdge() - selectRec.getDownEdge()) / selectRec.getStep();
               
               if (amountStep == 1)
               {
                   countThread = 1;
               } else {
                   countThread = 2;
               }
               
               for (int i = 0; i < countThread; i++)
               {
                   if (listThreads.isEmpty())
                   {
                       listThreads.add(new CalculatorThread());
                       listThreads.get(i).downEdge = selectRec.getDownEdge();
                   }
                   else
                   {    
                       listThreads.add(new CalculatorThread());
                       listThreads.get(i).downEdge = listThreads.get(i-1).upEdge;
                   }
                   listThreads.get(i).step = selectRec.getStep();
                   listThreads.get(i).upEdge = listThreads.get(i).downEdge + (listThreads.get(i).step * (Math.round(amountStep / countThread)));
               }
               
               statusLabel.setText("Вычисляю...");
               calculateProgressBar.setValue(0);
               calculateProgressBar.setMaximum((int)amountStep);

               isAbort = false;
               for(CalculatorThread currentThread : listThreads)
               {
                   currentThread.start();
               }
               
               modeInterBut = true;
               calcButton.setText(" Прервать ");
           } else {
               JOptionPane.showMessageDialog(frame, "Выделите строку параметров интеграла в таблице.", calcButton.getText(), JOptionPane.INFORMATION_MESSAGE);
           }   
        }
    }//GEN-LAST:event_calcButtonActionPerformed

    // Обработчик метки "Нижняя граница", сбрасывает значение в соответствующем поле
    private void constLabelDownEdgeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_constLabelDownEdgeMouseClicked
        inputDownEdgeTextField.setText("");
    }//GEN-LAST:event_constLabelDownEdgeMouseClicked

    // Обработчик метки "Верхняя граница", сбрасывает значение в соответствующем поле
    private void constLabelUpEdgeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_constLabelUpEdgeMouseClicked
        inputUpEdgeTextField.setText("");
    }//GEN-LAST:event_constLabelUpEdgeMouseClicked

    // Обработчик метки "Шаг", сбрасывает значение в соответствующем поле
    private void constLabelStepMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_constLabelStepMouseClicked
        inputStepTextField.setText("");
    }//GEN-LAST:event_constLabelStepMouseClicked

    // Обработчик метки "Результат", сбрасывает значение в соответствующем поле
    private void constLabelOutputResultMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_constLabelOutputResultMouseClicked
        outputResultTextField.setText("");
    }//GEN-LAST:event_constLabelOutputResultMouseClicked

    // Обработчик кнопки "Очистить", очищает коллекцию
    private void resetTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetTableButtonActionPerformed
        ((DefaultTableModel) tableData.getModel()).setRowCount(0);
    }//GEN-LAST:event_resetTableButtonActionPerformed

    // Обработчик кнопки "Заполнить", заполняет коллекцию примерами
    private void exampTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exampTableButtonActionPerformed
        updateTable();
    }//GEN-LAST:event_exampTableButtonActionPerformed

    // Обработчик кнопки меню "Открыть" -> "Текстовый режим"
    private void fileOpenTextMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileOpenTextMenuItemActionPerformed
        try
        {
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Список параметров (.lb4)", "lb4");
            fileChooser.setFileFilter(filter);
            // если диалоговое окно закрылось положительно
            if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
            {
                resetIntegralParams();
                FileReader fileReader = new FileReader(fileChooser.getSelectedFile());
                String value = "";
                int ch = fileReader.read();
                try
                {
                    boolean isBroken = false;
                    // считываем, пока не закончился файл и не была обнаружена ошибка в файле
                    while (ch != -1 & !isBroken)
                    {
                        RecIntegral current = new RecIntegral();
                        for (int i = 0; i < 3; i++)
                        {
                            // считываем до пробела
                            while (ch != 32 & ch != 13)
                            {
                                value += (char)ch;
                                ch = fileReader.read();
                            }
                            
                            // если не корректное число, то файл повреждён
                            if (!isOnlyDigits(value))
                            {
                                JOptionPane.showMessageDialog(frame, "Не удаётся прочитать файл. Данные повреждены.", "ОШИБКА", JOptionPane.ERROR_MESSAGE);
                                isBroken = true;
                                break;
                            }

                            switch(i)
                            {
                                case 0:
                                    current.setUpEdge(Double.valueOf(value));
                                    break;
                                case 1:
                                    current.setDownEdge(Double.valueOf(value));
                                    break;
                                case 2:
                                    current.setStep(Double.valueOf(value));
                                    addIntegralParam(current);
                                    ch = fileReader.read();
                                    break;
                            }
                            value = "";
                            ch = fileReader.read();
                        }
                    }
                }
                catch (InputException e)
                {
                    JOptionPane.showMessageDialog(frame, "Не удаётся прочитать файл. Данные не корректны.", "ОШИБКА", JOptionPane.ERROR_MESSAGE);
                }
                finally
                {
                    fileReader.close();
                }
            }
        }
        catch (IOException e)
        {
            JOptionPane.showMessageDialog(frame, "Не удаётся открыть файл.", "ОШИБКА", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_fileOpenTextMenuItemActionPerformed

    // Обработчик кнопки меню "Сохранить" -> "Текстовый режим"
    private void fileSaveTextMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileSaveTextMenuItemActionPerformed
        try
        {
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Список параметров (.lb4)", "lb4");
            fileChooser.setFileFilter(filter);
            // если диалоговое окно закрылось положительно
            if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                FileWriter fileWriter = new FileWriter(fileChooser.getSelectedFile() + ".lb4");
                for (RecIntegral currentParam : collectionParam)
                {
                    fileWriter.write(String.valueOf(currentParam.getUpEdge()) + " ");
                    fileWriter.write(String.valueOf(currentParam.getDownEdge()) + " ");
                    fileWriter.write(String.valueOf(currentParam.getStep()) + "\r\n");
                    fileWriter.flush();
                }
                fileWriter.close();
            }
        }
        catch(IOException e)
        {
            JOptionPane.showMessageDialog(frame, "Не удаётся выполнить сохранение.\nВозможно, не введено имя сохраняемого файла.", "ОШИБКА", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_fileSaveTextMenuItemActionPerformed
    
    // Обработчик кнопки меню "Сохранить" -> "Двоичный режим"
    private void fileSaveBinaryMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileSaveBinaryMenuItemActionPerformed
        try
        {
            saveFileSerrialize();
        }
        catch(IOException e)
        {
            JOptionPane.showMessageDialog(frame, "Не удаётся выполнить сохранение.", "ОШИБКА", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_fileSaveBinaryMenuItemActionPerformed

    // Метод, выполняющий сериализацию коллекции collectionParam и сохраняющий в файл
    private void saveFileSerrialize() throws IOException
    {
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Список параметров (.ser)", "ser");
        fileChooser.setFileFilter(filter);
        // если диалоговое окно закрылось положительно
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            CollectionSerrializable current = new CollectionSerrializable(collectionParam);
            ObjectOutputStream out = null;
            try {
                out = new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(fileChooser.getSelectedFile() + ".ser")));
                out.writeObject(current);
                out.flush();
            }
            catch (IOException ex)
            {
                JOptionPane.showMessageDialog(frame, "Не удаётся выполнить сохранение.", "ОШИБКА", JOptionPane.ERROR_MESSAGE);
            }
            finally
            {
                out.close();
            }
        }
    }
    
    // Обработчик кнопки меню "Открыть" -> "Двоичный режим"
    private void fileOpenBinaryMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileOpenBinaryMenuItemActionPerformed
        try
        {
            openFileSerrialize();
        }
        catch (IOException e)
        {
            JOptionPane.showMessageDialog(frame, "Не удаётся открыть файл.", "ОШИБКА", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_fileOpenBinaryMenuItemActionPerformed

    // Метод, открывающий серриализованный файл, формирует коллекцию collectionParam
    private void openFileSerrialize() throws IOException
    {
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Список параметров (.ser)", "ser");
        fileChooser.setFileFilter(filter);
        // если диалоговое окно закрылось положительно
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            resetIntegralParams();
            ObjectInputStream in = null;
            CollectionSerrializable restObj = null;
            in = new ObjectInputStream(new BufferedInputStream(new FileInputStream(fileChooser.getSelectedFile())));
            try {
                restObj = (CollectionSerrializable)in.readObject();
                collectionParam = restObj.getCollection();
                for (RecIntegral currentParam : collectionParam)
                {
                ((DefaultTableModel) tableData.getModel()).addRow(new Object[]{
                    currentParam.getDownEdge(), currentParam.getUpEdge(), currentParam.getStep()});
                }
            } catch (ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(frame, "Не удаётся открыть файл.", "ОШИБКА", JOptionPane.ERROR_MESSAGE);
            }
            finally
            {
                in.close();
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new MainForm().setVisible(true);
                } catch (InputException e) {
                    e.showMessageError();
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addRowButton;
    private javax.swing.JButton calcButton;
    private javax.swing.JProgressBar calculateProgressBar;
    private javax.swing.JLabel constLabelDownEdge;
    private javax.swing.JLabel constLabelOutputResult;
    private javax.swing.JLabel constLabelStep;
    private javax.swing.JLabel constLabelUpEdge;
    private javax.swing.JButton deleteRowButton;
    private javax.swing.JButton exampTableButton;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem fileOpenBinaryMenuItem;
    private javax.swing.JMenu fileOpenMenu;
    private javax.swing.JMenuItem fileOpenTextMenuItem;
    private javax.swing.JMenuItem fileSaveBinaryMenuItem;
    private javax.swing.JMenu fileSaveMenu;
    private javax.swing.JMenuItem fileSaveTextMenuItem;
    private javax.swing.JTextField inputDownEdgeTextField;
    private javax.swing.JTextField inputStepTextField;
    private javax.swing.JTextField inputUpEdgeTextField;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JTextField outputResultTextField;
    private javax.swing.JButton resetTableButton;
    private javax.swing.JScrollPane scrollTableData;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JTable tableData;
    // End of variables declaration//GEN-END:variables
}
